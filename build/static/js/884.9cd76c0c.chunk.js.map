{"version":3,"file":"static/js/884.9cd76c0c.chunk.js","mappings":"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","sources":["components/Widget/DataGrid/DataGrid.jsx"],"sourcesContent":["import React, { useState, useEffect, memo } from \"react\";\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport {\n  createTheme,\n  MuiThemeProvider,\n} from '@material-ui/core/styles'\nimport { notificationService } from '../../../services/NotificationService';\n\nconst DataGrid = memo(({\n  widget,\n  onReceiveNotification\n}) => {\n  const [tableBodyMaxHeight, setTableBodyMaxHeight] = useState(\"\");\n  const [urlParams, setUrlParams] = useState('')\n  const [data, setData] = useState([])\n  const [expandableRowIndex, setExpandableRowIndex] = useState(-1)\n\n  const columns = (widget.mappingResponseParams || []).map(\n    ({ responseParam, widgetParam }, index) => ({\n      colIndex: index,\n      name: responseParam,\n      appParam: widget.mappingParams.find((param) => widgetParam == param.widgetParam)?.appParam,\n    }\n    ));\n\n  let subscription;\n\n  useEffect(() => {\n    const result = widget.data || []\n    setData(result)\n    subscription = notificationService.getNotification().subscribe(notification => {\n      handleNotification(notification)\n    });\n\n    return () => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    }\n  }, [widget.data])\n\n  const handleNotification = (notification) => {\n    onReceiveNotification(notification.appParamsValue || {})\n    if (!notification || widget.mappingParams.length == 0) {\n      return\n    }\n\n    const commonAppParams = widget.mappingParams.filter(({ appParam }) => Object.keys(notification.appParamsValue).indexOf(appParam) > -1)\n    let rowIndex = -1\n    if (commonAppParams?.length > 0) {\n      rowIndex = widget.data.findIndex((rowData) => commonAppParams.every(({ appParam, responseParam }) => {\n        return notification.appParamsValue[appParam] == rowData[responseParam]\n      }\n      ))\n    }\n    setExpandableRowIndex(rowIndex)\n  }\n\n  const getMuiTheme = () =>\n    createTheme({\n      overrides: {\n        MUIDataTable: {\n          paper: {\n            boxShadow: \"none\"\n          }\n        },\n        MUIDataTableHeadCell: {\n          fixedHeader: {\n            backgroundColor: '#f1f2f4',\n            padding: '10px'\n          }\n        },\n        MUIDataTableSelectCell: {\n          headerCell: {\n            backgroundColor: '#f1f2f4',\n          }\n        },\n        MUIDataTableBodyCell: {\n          root: {\n            padding: '6px',\n            cursor: 'pointer',\n          },\n        },\n      }\n    });\n\n  const notifyAllWidgets = (widgetNotification) => {\n    notificationService.sendNotification(widgetNotification);\n  }\n\n  const handleRowClick = (_, { rowIndex }) => {\n    if (widget.mappingParams.length == 0) {\n      return\n    }\n    const rowData = data[rowIndex]\n    let appParamsValue = {}\n    widget.mappingParams.forEach(({ appParam, responseParam }) => {\n      appParamsValue[appParam] = rowData[responseParam]\n    })\n\n    if (Object.keys(appParamsValue).length > 0) {\n      setExpandableRowIndex(rowIndex)\n      notifyAllWidgets({\n        fromWidgetKey: widget._id,\n        appParamsValue\n      })\n    }\n  }\n\n  const options = {\n    filter: true,\n    filterType: \"dropdown\",\n    responsive: \"vertical\",\n    tableBodyMaxHeight,\n    fixedHeader: true,\n    selectableRowsHideCheckboxes: true,\n    onRowClick: handleRowClick,\n  };\n\n  const components = {\n    ExpandButton: function (props) {\n      if (props.dataIndex !== expandableRowIndex || !urlParams) return <div style={{ width: '24px' }} />;\n      return <ExpandButton {...props} />;\n    }\n  };\n\n  if (!widget.data || widget.data.length == 0) {\n    return null\n  }\n\n  return (\n    <MuiThemeProvider theme={getMuiTheme()}>\n      <MUIDataTable\n        data={data}\n        columns={columns}\n        options={options}\n        components={components}\n      />\n    </MuiThemeProvider>\n  );\n})\n\nexport default DataGrid"],"names":["DataGrid","memo","subscription","widget","onReceiveNotification","useState","tableBodyMaxHeight","urlParams","data","setData","expandableRowIndex","setExpandableRowIndex","columns","mappingResponseParams","map","index","responseParam","widgetParam","colIndex","name","appParam","mappingParams","find","param","useEffect","result","notificationService","subscribe","notification","handleNotification","unsubscribe","appParamsValue","length","commonAppParams","filter","Object","keys","indexOf","rowIndex","findIndex","rowData","every","options","filterType","responsive","fixedHeader","selectableRowsHideCheckboxes","onRowClick","_","widgetNotification","forEach","fromWidgetKey","_id","components","ExpandButton","props","dataIndex","style","width","theme","createTheme","overrides","MUIDataTable","paper","boxShadow","MUIDataTableHeadCell","backgroundColor","padding","MUIDataTableSelectCell","headerCell","MUIDataTableBodyCell","root","cursor"],"sourceRoot":""}
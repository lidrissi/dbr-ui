{"version":3,"file":"static/js/249.02666248.chunk.js","mappings":"wKAqHA,UA9G4B,SAAC,GAGtB,IAAD,IACEA,EACAC,EAJJC,EAEE,EAFFA,SACAC,EACE,EADFA,OAKA,GAAoDC,EAAAA,EAAAA,YAAWC,EAAAA,GAAvDC,EAAR,EAAQA,IAAkBC,EAA1B,EAAaC,UAAaD,QAAWE,EAArC,EAAqCA,WAE/BC,EAAKP,GAAkBD,EACvBS,GAAgB,UAAAL,EAAII,UAAJ,eAASC,gBAAiB,KAC1CC,GAAO,UAAAN,EAAII,UAAJ,eAASE,OAAQ,IAE9BC,EAAAA,EAAAA,YAAU,WAMN,OALAb,EAAec,EAAAA,EAAAA,kBAAsCC,WAAU,SAAAC,GAC3DC,EAAmBV,EAASS,EAAcJ,MAG9CM,IACO,WACClB,GACAA,EAAamB,iBAGtB,CAACP,EAAML,KAEVM,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACZ,GAAKF,EAAL,CAGA,IAAMS,EAAOR,EAAKS,MAAK,gBAAGC,EAAH,EAAGA,IAAH,OAAaX,GAAiBW,KACrD,GAAKF,EAAL,CAGA,IAAIG,EAAiB,GACrB,IAAK,IAAIC,KAAQJ,EAAKK,UAAY,GAC9BF,EAAeC,GAAOJ,EAAKK,SAASD,GAAO,GAAGE,MAAM,KAAKpB,KAAI,SAAAqB,GAAC,OAAIA,EAAEC,UAAQ,GAE5ER,EAAKS,mBACLN,EAAeH,EAAKS,kBAAoBT,EAAKU,SAE7C,UAAAC,OAAOC,KAAKT,UAAZ,eAA6BU,QAAS,IAAO9B,GAAUI,EAAQJ,IAC/D+B,EAAiB,CACbC,cAAejC,EACfqB,eAAAA,QAGT,CAACZ,IAEJ,IAAMO,EAAe,SAACX,GAqBlB,OApBAN,GAASmC,EAAAA,EAAAA,IAAGC,EAAAA,GAAwB,CAChCC,KAAM,eACNC,WAAY,CAAC,YAAa,cAGvBC,GAAG,WAAW,WACjB1B,EAAAA,EAAAA,qBAAyCb,MAK7CA,EAAOuC,GAAG,wBAAwB,SAACxB,GAC3BA,EAAayB,gBAAkBxC,EAAOS,KAGrCI,EAAAA,EAAAA,8BAAkDE,EAAayB,iBAChExB,EAAmBV,EAASS,EAAa0B,mBAAoB9B,OAI9DX,GAGLgB,EAAqB,SAACV,EAASS,EAAc2B,GAC/C,KAAKpC,GAAWJ,GAAUI,EAAQJ,KAAaa,EAAaO,gBAAkBP,EAAamB,eAAiBjC,EAA5G,CAIA,IAAM0C,EAAY5B,EAAaO,eACzBsB,EAAgBF,EAAMG,QAAO,SAAA1B,GAC/B,IAAM2B,EAAahB,OAAOC,KAAKY,GAAWE,QAAO,SAAAtB,GAAG,OAAIJ,EAAKK,UAAYL,EAAKK,SAASD,MACvF,OAAiB,OAAVuB,QAAU,IAAVA,OAAA,EAAAA,EAAYd,QAAS,GAAKc,EAAWC,OAAM,SAAAxB,GAC9C,OAAQJ,EAAKK,SAASD,KACC,IAAlBoB,EAAUpB,IAAcJ,EAAKK,SAASD,GAAKE,MAAM,KAAKpB,KAAI,SAAA2C,GAAI,OAAIA,EAAKrB,UAAQsB,QAAQN,EAAUpB,GAAO,KAAO,UAG3G,OAAbqB,QAAa,IAAbA,OAAA,EAAAA,EAAeZ,QAAS,GACxBxB,EAAWN,GAAkBD,EAAU,CACnCS,cAAuC,GAAxBkC,EAAcZ,OAAcY,EAAc,GAAGvB,IAAM,OAClE6B,SAAUN,EACVF,MAAOE,MAKbX,EAAmB,SAACQ,GACtB5B,EAAAA,EAAAA,iBAAqC4B,GAChCzC,IACDA,EAASiB,EAAaX,IAG1BN,EAAOmD,KAAK,oBAAqB,CAAEX,eAAgBxC,EAAOS,GAAIgC,mBAAoBA,KAGtF,MAAO,CACH/B,cAAAA,EACAK,cAAc","sources":["components/Widget/Tree/useNodeNotification.jsx"],"sourcesContent":["import { useContext, useEffect } from 'react'\nimport { BACKEND_SOCKET_API_URL } from 'constants/resources';\nimport io from 'socket.io-client'\n// import { saveCurrentMapNodes } from 'widgets/Map/map.actions';\nimport { notificationService } from '../../../services/NotificationService';\nimport { DbrContext } from '../../../services/context';\n\nconst useNodeNotification = ({\n    widgetId,\n    treeId\n}) => {\n    let subscription;\n    let socket;\n\n    const { map, dashboard: { widgets }, setMapData } = useContext(DbrContext)\n\n    const id = treeId ? treeId : widgetId\n    const currentNodeId = map[id]?.currentNodeId || null\n    const data = map[id]?.data || []\n\n    useEffect(() => {\n        subscription = notificationService.getNotification().subscribe(notification => {\n            handleNotification(widgets, notification, data)\n        });\n\n        createSocket()\n        return () => {\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n        }\n    }, [data, widgets])\n\n    useEffect(() => {\n        if (!currentNodeId) {\n            return\n        }\n        const node = data.find(({ _id }) => currentNodeId == _id)\n        if (!node) {\n            return\n        }\n        let appParamsValue = {}\n        for (let key in (node.metaData || {})) {\n            appParamsValue[key] = node.metaData[key] + ''.split(',').map(i => i.trim())[0]\n        }\n        if (node.applicationParam) {\n            appParamsValue[node.applicationParam] = node.name\n        }\n        if (Object.keys(appParamsValue)?.length > 0 && !(treeId && widgets[treeId])) {\n            notifyAllWidgets({\n                fromWidgetKey: widgetId,\n                appParamsValue\n            });\n        }\n    }, [currentNodeId])\n\n    const createSocket = (widgets) => {\n        socket = io(BACKEND_SOCKET_API_URL, {\n            path: '/back/socket',\n            transports: ['websocket', 'polling']\n        });\n\n        socket.on('connect', () => {\n            notificationService.registerWidgetSocket(socket);\n\n\n        });\n\n        socket.on(\"RECEIVE_NOTIFICATION\", (notification) => {\n            if (notification.widgetSocketId == socket.id) {\n                return\n            }\n            if (!notificationService.isWidgetRegistredInSocketPool(notification.widgetSocketId)) {\n                handleNotification(widgets, notification.widgetNotification, data);\n            }\n        });\n\n        return socket\n    }\n\n    const handleNotification = (widgets, notification, nodes) => {\n        if ((widgets && treeId && widgets[treeId]) || !notification.appParamsValue || notification.fromWidgetKey == widgetId) {\n            return\n        }\n\n        const appParams = notification.appParamsValue\n        const selectedNodes = nodes.filter(node => {\n            const commonKeys = Object.keys(appParams).filter(key => node.metaData && node.metaData[key])\n            return commonKeys?.length > 0 && commonKeys.every(key => {\n                return (node.metaData[key] &&\n                    (appParams[key] == '' || node.metaData[key].split(',').map(item => item.trim()).indexOf(appParams[key] + \"\") > -1))\n            })\n        })\n        if (selectedNodes?.length > 0) {\n            setMapData(treeId ? treeId : widgetId, {\n                currentNodeId: selectedNodes.length == 1 ? selectedNodes[0]._id : 'root',\n                mapNodes: selectedNodes,\n                nodes: selectedNodes\n            })\n        }\n    }\n\n    const notifyAllWidgets = (widgetNotification) => {\n        notificationService.sendNotification(widgetNotification);\n        if (!socket) {\n            socket = createSocket(widgets)\n        }\n        // notify others dashboards\n        socket.emit(\"SEND_NOTIFICATION\", { widgetSocketId: socket.id, widgetNotification: widgetNotification });\n    }\n\n    return {\n        currentNodeId,\n        notification: true\n    }\n};\n\nexport default useNodeNotification;"],"names":["subscription","socket","widgetId","treeId","useContext","DbrContext","map","widgets","dashboard","setMapData","id","currentNodeId","data","useEffect","notificationService","subscribe","notification","handleNotification","createSocket","unsubscribe","node","find","_id","appParamsValue","key","metaData","split","i","trim","applicationParam","name","Object","keys","length","notifyAllWidgets","fromWidgetKey","io","BACKEND_SOCKET_API_URL","path","transports","on","widgetSocketId","widgetNotification","nodes","appParams","selectedNodes","filter","commonKeys","every","item","indexOf","mapNodes","emit"],"sourceRoot":""}
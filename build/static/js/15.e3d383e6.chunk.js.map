{"version":3,"file":"static/js/15.e3d383e6.chunk.js","mappings":"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","sources":["components/Widget/GenericWidget/GenericWidget.jsx","components/Widget/GenericWidget/index.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport io from 'socket.io-client'\nimport { BACKEND_SOCKET_API_URL } from 'constants/resources'\n// amcharts imports\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated'\nimport * as am4core from '@amcharts/amcharts4/core'\nimport * as am4charts from '@amcharts/amcharts4/charts'\nimport * as am4plugins_wordCloud from \"@amcharts/amcharts4/plugins/wordCloud\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport worldMoroccoLow from \"@amcharts/amcharts4-geodata/worldMoroccoLow\";\nimport moroccoLow from \"@amcharts/amcharts4-geodata/moroccoLow\";\nimport { mapParams, notificationService } from '../../../services/NotificationService';\n\nam4core.useTheme(am4themes_animated);\nam4core.addLicense('ch-custom-attribution')\n\nclass GenericWidget extends PureComponent {\n  mappingParams = [];\n\n  chart;\n  socket;\n  lastAppParams = { ...mapParams };\n  constructor(props) {\n    super(props);\n\n    this.mappingParams = this.props.widget.mappingParams;\n    this.subscription = notificationService.getNotification().subscribe((widgetNotification) => {\n      this.handleNotification(widgetNotification)\n    });\n    if (!this.socket) {\n\n      this.socket = io(BACKEND_SOCKET_API_URL, {\n        path: '/back/socket',\n        transports: ['websocket', 'polling']\n      })\n\n      this.socket.on('connect', (socket) => {\n        notificationService.registerWidgetSocket(this.socket);\n      });\n      this.socket.on(\"RECEIVE_NOTIFICATION\", (notification) => {\n        if (!notificationService.isWidgetRegistredInSocketPool(notification.widgetSocketId)) {\n          notificationService.sendNotification(notification.widgetNotification);\n        }\n      });\n    }\n  }\n\n  handleNotification = (widgetNotification) => {\n    if (JSON.stringify(this.lastAppParams) == JSON.stringify(widgetNotification.appParamsValue)) {\n      return\n    }\n    this.props.onReceiveNotification(widgetNotification.appParamsValue)\n    this.lastAppParams = { ...widgetNotification.appParamsValue }\n  }\n\n  setDashboardId() {\n    // if (this.props.match.params.title) {\n    //   this.dashboardId = this.props.match.params.title\n    // }\n  }\n\n  renderWidget(widgetNotification) {\n    if (widgetNotification) {\n      if (widgetNotification !== null\n        && widgetNotification !== undefined\n        // && widgetNotification.fromWidgetKey !== this.props.widget.widgetKey\n      ) {\n        try {\n          this.props.widget.config = this.jsonParser(this.props.widget.config)\n          if (this.props.widget.config.hasOwnProperty('render')) {\n            const render = eval(this.props.widget.config.render);\n            const renderParams = {\n              chart: this.chart,\n              props: this.props,\n              notification: widgetNotification,\n              am4core,\n              am4charts,\n              worldMoroccoLow,\n              moroccoLow,\n              am4maps,\n              am4plugins_wordCloud\n            }\n\n            this.chart = render(renderParams);\n            this.chart.dispatchEvent = this.dispathWidgetEvent.bind(this);\n          }\n        }\n        catch (er) {\n          console.log(er);\n        }\n      }\n    }\n  }\n\n  notifyAllWidgets(widgetNotification) {\n    notificationService.sendNotification(widgetNotification);\n\n    // notify others dashboards\n    this.socket.emit(\"SEND_NOTIFICATION\", { widgetSocketId: this.socket.id, widgetNotification });\n  }\n\n  dispathWidgetEvent(widgetParam) {\n    if (!this.mappingParams || this.mappingParams.length == 0) {\n      return\n    }\n\n    const widgetNotification = {\n      fromWidgetKey: this.props.widget._id,\n      appParamsValue: {}\n    };\n    this.mappingParams.forEach(item => {\n      widgetNotification.appParamsValue[item.appParam] = widgetParam[item.responseParam];\n    })\n\n    this.notifyAllWidgets(widgetNotification);\n  }\n\n  componentDidMount() {\n    this.initializeWidget()\n    this.props.exportChart.current = this.exportChart\n    this.props.initChart.current = this.initializeWidget\n  }\n\n  componentWillUnmount() {\n    if (this.subscription)\n      this.subscription.unsubscribe();\n  }\n\n  exportChart = (type) => {\n    this.chart.exporting.export(type);\n  }\n\n  jsonParser(toParse) {\n    let parsed = toParse\n    if (typeof toParse === 'string') parsed = JSON.parse(toParse);\n    if (typeof parsed === 'string') { // case of over-stringified strings\n      return this.jsonParser(parsed)\n    }\n    return parsed;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.widget.data != prevProps.widget.data) {\n      this.renderWidget({ appParamsValue: this.lastAppParams });\n    }\n  }\n\n  initializeWidget = async () => {\n    try {\n      this.setDashboardId();\n      try {\n        const parsedConfig = this.jsonParser(this.props.widget.config);\n        this.props.widget.config = parsedConfig;\n      }\n      catch (er) {\n        console.log(er);\n      }\n\n      if (this.props.widget.config.hasOwnProperty('init')) {\n        // init chart from config\n        const initChart = eval(this.props.widget.config.init);\n        initChart(this.props);\n        this.chart = am4core.createFromConfig(this.props.widget.config, this.props.widget._id, this.props.widget.type);\n      }\n\n      if (this.props.widget.config.hasOwnProperty('initChart')) {\n        // init chart from javascript code\n        const initChart = eval(this.props.widget.config.initChart);\n\n        const initChartParams = {\n          chart: this.chart,\n          props: this.props,\n          am4core,\n          am4charts,\n          worldMoroccoLow,\n          moroccoLow,\n          am4maps,\n          am4plugins_wordCloud\n        }\n\n        this.chart = initChart(initChartParams);\n      }\n      if (this.chart) {\n        this.chart.dispatchEvent = this.dispathWidgetEvent.bind(this);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n  render() {\n    return (\n      <div\n        key={this.props.widget._id}\n        id={this.props.widget._id}\n        className={`w-100 h-100 ${this.props.widget?.data?.length > 0 ? '' : 'd-none'}`}\n      />\n    );\n  }\n\n\n}\n\nexport default GenericWidget;\n","import GenericWidget from './GenericWidget'\n\nexport default GenericWidget"],"names":["am4core","am4themes_animated","GenericWidget","props","mappingParams","lastAppParams","mapParams","handleNotification","widgetNotification","JSON","stringify","appParamsValue","onReceiveNotification","exportChart","type","chart","exporting","export","initializeWidget","setDashboardId","parsedConfig","jsonParser","widget","config","er","console","log","hasOwnProperty","initChart","eval","init","_id","initChartParams","am4charts","worldMoroccoLow","moroccoLow","am4maps","am4plugins_wordCloud","dispatchEvent","dispathWidgetEvent","bind","error","subscription","notificationService","subscribe","socket","io","BACKEND_SOCKET_API_URL","path","transports","on","notification","widgetSocketId","renderWidget","undefined","this","render","renderParams","emit","id","widgetParam","length","fromWidgetKey","forEach","item","appParam","responseParam","notifyAllWidgets","current","unsubscribe","toParse","parsed","parse","prevProps","data","className","PureComponent"],"sourceRoot":""}
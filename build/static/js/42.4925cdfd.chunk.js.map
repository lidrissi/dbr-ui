{"version":3,"file":"static/js/42.4925cdfd.chunk.js","mappings":"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","sources":["api/node/node.js","components/Widget/Tree/SearchBar.jsx","components/Widget/Tree/Tree.jsx","components/Widget/Tree/TreeContent.js","helpers/tree.js","components/Widget/Tree/useNodeNotification.jsx","webpack://dbr-ui/./src/components/Widget/Tree/tree.scss?d158"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from 'react-query'\nimport axios from '../axios'\nimport { BACKEND_API_RESOURCES, getApiUrl } from 'constants/resources'\n\nexport function getWidgetNodes(widget) {\n\n  const options = {\n    method: BACKEND_API_RESOURCES.nodes.get.method,\n    url: `${getApiUrl()}/${BACKEND_API_RESOURCES.nodes.get.resource}?widget=${widget}`,\n  }\n\n  return axios(options)\n    .then((res) => {\n      return res.data\n    })\n    .catch((err) => {\n      return err\n    })\n}","import React, { useState } from \"react\";\n\n\nconst SearchBar = (props) => {\n\n\n    const [showInput, setShowInput] = useState(false)\n    const { selectPrevMatch, selectNextMatch, searchFocusIndex, searchFoundCount, onSearchChange, searchString } = props;\n\n    const SearchIcon = () => {\n        return (\n            <span className=\"search-box__icon\" onClick={() => setShowInput(!showInput)}>\n                <i className=\"simple-icon-magnifier\" />\n            </span>\n        )\n    }\n\n    return (\n        <>\n            {showInput ? <div className=\"search-box\">\n                <SearchIcon />\n                <input\n                    value={searchString}\n                    onChange={(e) => onSearchChange(e.target.value)}\n                />\n                {\n                    searchString?.length > 0 &&\n                    <>\n                        <span className=\"search-box__count m-1\">{searchFoundCount > 0 ? searchFocusIndex + 1 : 0} / {searchFoundCount}</span>\n                        <div className=\"search-box__controls m-1\">\n                            <span onClick={selectPrevMatch}>\n                                <i className=\"simple-icon-arrow-up\" />\n                            </span>\n                            <span onClick={selectNextMatch} className=\"m-1\">\n                                <i className=\"simple-icon-arrow-down\" />\n                            </span>\n                        </div>\n                    </>\n                }\n\n            </div> :\n                <SearchIcon />}\n        </>\n    )\n}\n\n\nexport default SearchBar;","import React, { useState } from 'react';\n\nimport TreeContent from './TreeContent';\nimport './tree.scss';\n\nconst Tree = (props) => {\n\n    const [treeData, setTreeData] = useState([]);\n\n    const widgetId = props.widget?._id || '';\n\n\n    return (\n        <TreeContent\n            setTreeData={setTreeData}\n            treeData={treeData}\n            onEditNode={() => { }}\n            onAddNode={() => { }}\n            onRemoveNode={() => { }}\n            onMoveNode={() => { }}\n            widgetId={widgetId}\n        />\n    )\n}\n\nexport default Tree;","import React, { useContext, useEffect, useState } from \"react\";\nimport SortableTree, { getVisibleNodeCount, find } from \"react-sortable-tree\";\nimport \"react-sortable-tree/style.css\";\n\nimport { listToTree } from \"helpers/tree\";\n\nimport SearchBar from \"./SearchBar\";\nimport useNodeNotification from \"./useNodeNotification\";\nimport { getWidgetNodes } from \"../../../api/node/node\";\nimport { DbrContext } from \"../../../services/context\";\n\nconst TreeContent = React.memo((props) => {\n\n    const { currentNodeId } = useNodeNotification({ widgetId: props.widgetId })\n    const { setMapData } = useContext(DbrContext)\n\n    const [searchString, setSearchString] = useState(\"\")\n    const [searchFocusIndex, setSearchFocusIndex] = useState(0)\n    const [searchFoundCount, setSearchFoundCount] = useState(null)\n    const [prevTreeData, setPrevTreeData] = useState([])\n\n    const { treeData, onAddNode, setTreeData, onMoveNode } = props;\n\n    useEffect(() => {\n        getWidgetNodes(props.widgetId).then((data) => {\n            const tree = listToTree(data, [])\n            setTreeData(tree)\n        })\n    }, [])\n\n    useEffect(() => {\n        const result = find({\n            getNodeKey,\n            treeData,\n            searchQuery: currentNodeId,\n            searchMethod: ({ node, searchQuery }) => node._id == searchQuery,\n            searchFocusOffset: 0,\n            expandAllMatchPaths: true,\n            expandFocusMatchPaths: true,\n        });\n        if (result.treeData?.length > 0) {\n            setTreeData(result.treeData)\n        }\n    }, [currentNodeId])\n\n    const selectPrevMatch = () => {\n        setSearchFocusIndex(searchFocusIndex !== null\n            ? (searchFoundCount + searchFocusIndex - 1) % searchFoundCount\n            : searchFoundCount - 1)\n    };\n\n    const selectNextMatch = () => {\n        setSearchFocusIndex(\n            searchFocusIndex !== null\n                ? (searchFocusIndex + 1) % searchFoundCount\n                : 0\n        );\n    };\n\n    const handleDragStateChange = ({ isDragging }) => {\n        if (!isDragging) {\n            return;\n        }\n        setPrevTreeData(treeData)\n    }\n\n    const customSearchMethod = ({ node, searchQuery }) =>\n        searchQuery &&\n        node.name &&\n        node.name.toLowerCase().indexOf(searchQuery.toLowerCase()) > -1\n\n    const getNodeKey = ({ treeIndex }) => treeIndex\n\n    const handleNodeClick = (event, node) => {\n        const clickedItemClassName = event.target.className;\n        if (\n            clickedItemClassName == 'rst__expandButton' || clickedItemClassName == 'rst__collapseButton'\n        ) {\n            return\n        }\n        const nodes = [\n            ...(node.children?.length > 0 && node.polygonCoordinates?.length == 0) ? [] : [node],\n            ...node.children?.length > 0 ? node.children : []\n        ]\n\n        if (!nodes || nodes.length == 0) {\n            return\n        }\n\n        console.log(\"node id\", node._id);\n        setMapData(props.widgetId, {\n            currentNodeId: node._id,\n            nodes,\n            mapNodes: nodes,\n        })\n    }\n\n    const visibleNodesCount = getVisibleNodeCount({ treeData })\n\n    return (\n        <div className=\"wrapper\">\n            <div className=\"d-flex justify-content-end align-items-center\">\n                <SearchBar\n                    searchString={searchString}\n                    selectPrevMatch={selectPrevMatch}\n                    selectNextMatch={selectNextMatch}\n                    searchFocusIndex={searchFocusIndex}\n                    searchFoundCount={searchFoundCount}\n                    onSearchChange={setSearchString}\n                />\n            </div>\n            <div className=\"tree-wrapper\">\n                <SortableTree\n                    onMoveNode={({ node, nextParentNode, path }) => { onMoveNode({ node, nextParentNode, path, prevTreeData }) }}\n                    onDragStateChanged={handleDragStateChange}\n                    treeData={treeData}\n                    onChange={setTreeData}\n                    rowHeight={55}\n                    canDrag={false}\n                    canDrop={({ nextParent }) => !nextParent || !nextParent.noChildren}\n                    searchQuery={searchString}\n                    style={{ height: 55 * visibleNodesCount + 20 }}\n                    searchFocusOffset={searchFocusIndex}\n                    searchFinishCallback={matches => {\n                        setSearchFoundCount(matches.length);\n                        setSearchFocusIndex(matches.length > 0 ? searchFocusIndex % matches.length : 0)\n                    }\n                    }\n                    isVirtualized={true}\n                    searchMethod={customSearchMethod}\n                    generateNodeProps={rowInfo => ({\n                        title: `${rowInfo.node.name}`,\n                        onClick: (e) => handleNodeClick(e, rowInfo.node),\n                        className: (currentNodeId == rowInfo.node._id) ? 'rst__rowSearchMatch rst__rowSearchFocus' : ''\n                    })}\n                />\n            </div>\n        </div>\n    );\n})\n\n\nexport default TreeContent","export function listToTree(selfParentTree, currentRoles = []) {\n    // edge case\n    if (!selfParentTree || selfParentTree.length < 1) {\n        return [];\n    }\n    // group by parent\n    const listNode = {};\n    selfParentTree.forEach((node) => {\n        if (!node.roles || node.roles.length == 0 || node.roles.some((role) => currentRoles.indexOf(role) > -1)) {\n            listNode[node._id] = {\n                ...node,\n                lat: node.location?.coordinates[1],\n                lng: node.location?.coordinates[0],\n                children: node.children || []\n            };\n        }\n    });\n    const tree = [];\n    Object.keys(listNode).forEach((id, index) => {\n        if (listNode && listNode.hasOwnProperty(id)) {\n            const mappedElem = listNode[id];\n            // If the element is not at the root level, add it to its parent array of children.\n            if (mappedElem.parent && listNode[mappedElem.parent]) {\n                listNode[mappedElem.parent].children.push(mappedElem);\n            }\n            // If the element is at the root level, add it to first level elements array.\n            else {\n                tree.push(mappedElem);\n            }\n        }\n    });\n    for (let i = 0; i < tree.length; i++) {\n        tree[i].isRoot = true;\n    }\n    return tree;\n}\n\n\nfunction constructList(nodeList, parent, parents) {\n    let list = [];\n    nodeList.forEach((node) => {\n        node.parents = parents;\n        node.parent = parent;\n        list.push(node);\n        list = list.concat(constructList(node.children || [], node._id, [...parents, node._id]));\n    });\n    return list;\n}\n\nexport function treeToList(tree) {\n    return constructList(tree, null, []);\n}\n\n\n","import { useContext, useEffect } from 'react'\nimport { BACKEND_SOCKET_API_URL } from 'constants/resources';\nimport io from 'socket.io-client'\n// import { saveCurrentMapNodes } from 'widgets/Map/map.actions';\nimport { notificationService } from '../../../services/NotificationService';\nimport { DbrContext } from '../../../services/context';\n\nconst useNodeNotification = ({\n    widgetId,\n    treeId\n}) => {\n    let subscription;\n    let socket;\n\n    const { map, dashboard: { widgets }, setMapData } = useContext(DbrContext)\n\n    const id = treeId ? treeId : widgetId\n    const currentNodeId = map[id]?.currentNodeId || null\n    const data = map[id]?.data || []\n\n    useEffect(() => {\n        subscription = notificationService.getNotification().subscribe(notification => {\n            handleNotification(widgets, notification, data)\n        });\n\n        createSocket()\n        return () => {\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n        }\n    }, [data, widgets])\n\n    useEffect(() => {\n        if (!currentNodeId) {\n            return\n        }\n        const node = data.find(({ _id }) => currentNodeId == _id)\n        if (!node) {\n            return\n        }\n        let appParamsValue = {}\n        for (let key in (node.metaData || {})) {\n            appParamsValue[key] = node.metaData[key] + ''.split(',').map(i => i.trim())[0]\n        }\n        if (node.applicationParam) {\n            appParamsValue[node.applicationParam] = node.name\n        }\n        if (Object.keys(appParamsValue)?.length > 0 && !(treeId && widgets[treeId])) {\n            notifyAllWidgets({\n                fromWidgetKey: widgetId,\n                appParamsValue\n            });\n        }\n    }, [currentNodeId])\n\n    const createSocket = (widgets) => {\n        socket = io(BACKEND_SOCKET_API_URL, {\n            path: '/back/socket',\n            transports: ['websocket', 'polling']\n        });\n\n        socket.on('connect', () => {\n            notificationService.registerWidgetSocket(socket);\n\n\n        });\n\n        socket.on(\"RECEIVE_NOTIFICATION\", (notification) => {\n            if (notification.widgetSocketId == socket.id) {\n                return\n            }\n            if (!notificationService.isWidgetRegistredInSocketPool(notification.widgetSocketId)) {\n                handleNotification(widgets, notification.widgetNotification, data);\n            }\n        });\n\n        return socket\n    }\n\n    const handleNotification = (widgets, notification, nodes) => {\n        if ((widgets && treeId && widgets[treeId]) || !notification.appParamsValue || notification.fromWidgetKey == widgetId) {\n            return\n        }\n\n        const appParams = notification.appParamsValue\n        const selectedNodes = nodes.filter(node => {\n            const commonKeys = Object.keys(appParams).filter(key => node.metaData && node.metaData[key])\n            return commonKeys?.length > 0 && commonKeys.every(key => {\n                return (node.metaData[key] &&\n                    (appParams[key] == '' || node.metaData[key].split(',').map(item => item.trim()).indexOf(appParams[key] + \"\") > -1))\n            })\n        })\n        if (selectedNodes?.length > 0) {\n            setMapData(treeId ? treeId : widgetId, {\n                currentNodeId: selectedNodes.length == 1 ? selectedNodes[0]._id : 'root',\n                mapNodes: selectedNodes,\n                nodes: selectedNodes\n            })\n        }\n    }\n\n    const notifyAllWidgets = (widgetNotification) => {\n        notificationService.sendNotification(widgetNotification);\n        if (!socket) {\n            socket = createSocket(widgets)\n        }\n        // notify others dashboards\n        socket.emit(\"SEND_NOTIFICATION\", { widgetSocketId: socket.id, widgetNotification: widgetNotification });\n    }\n\n    return {\n        currentNodeId,\n        notification: true\n    }\n};\n\nexport default useNodeNotification;","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["getWidgetNodes","widget","options","method","BACKEND_API_RESOURCES","url","getApiUrl","axios","then","res","data","catch","err","props","useState","showInput","setShowInput","selectPrevMatch","selectNextMatch","searchFocusIndex","searchFoundCount","onSearchChange","searchString","SearchIcon","className","onClick","value","onChange","e","target","length","treeData","setTreeData","widgetId","_id","onEditNode","onAddNode","onRemoveNode","onMoveNode","TreeContent","React","currentNodeId","useNodeNotification","setMapData","useContext","DbrContext","setSearchString","setSearchFocusIndex","setSearchFoundCount","prevTreeData","setPrevTreeData","useEffect","tree","selfParentTree","currentRoles","listNode","forEach","node","roles","some","role","indexOf","lat","location","coordinates","lng","children","Object","keys","id","index","hasOwnProperty","mappedElem","parent","push","i","isRoot","listToTree","result","find","getNodeKey","searchQuery","searchMethod","searchFocusOffset","expandAllMatchPaths","expandFocusMatchPaths","treeIndex","visibleNodesCount","getVisibleNodeCount","SearchBar","nextParentNode","path","onDragStateChanged","isDragging","rowHeight","canDrag","canDrop","nextParent","noChildren","style","height","searchFinishCallback","matches","isVirtualized","name","toLowerCase","generateNodeProps","rowInfo","title","event","clickedItemClassName","nodes","polygonCoordinates","console","log","mapNodes","handleNodeClick","subscription","socket","treeId","map","widgets","dashboard","notificationService","subscribe","notification","handleNotification","createSocket","unsubscribe","appParamsValue","key","metaData","split","trim","applicationParam","notifyAllWidgets","fromWidgetKey","io","BACKEND_SOCKET_API_URL","transports","on","widgetSocketId","widgetNotification","appParams","selectedNodes","filter","commonKeys","every","item","emit"],"sourceRoot":""}
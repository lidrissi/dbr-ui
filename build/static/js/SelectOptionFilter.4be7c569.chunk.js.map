{"version":3,"file":"static/js/SelectOptionFilter.4be7c569.chunk.js","mappings":"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","sources":["constants/datasource.js","components/Filter/SelectOptionFilter.jsx"],"sourcesContent":["export const noQueryDatasource = (type) => type === 'csv_file'","import { noQueryDatasource } from \"constants/datasource\";\nimport React, { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport { ButtonDropdown, DropdownItem, DropdownMenu, DropdownToggle } from \"reactstrap\";\nimport { fetchDatasourceQuery } from \"services/datasource/datasourceManager\";\nimport { mapParams, notificationService } from \"../../services/NotificationService\";\n\nconst SelectOptionFilter = forwardRef((props, ref) => {\n\n  const { tag, onSendNotification } = props\n\n  let subscription\n  let notification = { appParamsValue: {} }\n\n  const [isOpenSizingLg, setIsOpenSizingLg] = useState(false);\n  const [selectedOption, setSelectedOption] = useState('ALL');\n  const [options, setOptions] = useState(tag.configuration.options || [])\n  const [loading, setLoading] = useState(false)\n\n  useImperativeHandle(ref, () => {\n    return {\n      resetSelection\n    }\n  });\n\n  const fetchFilter = async (paramsValue = {}) => {\n    const datasource = { ...tag.configuration.dataSource };\n    if (!datasource.query && !noQueryDatasource(datasource.type)) {\n      return\n    }\n    setLoading(true)\n    if (datasource.query) {\n      datasource.query.paramsValue = paramsValue\n    }\n    const result = await fetchDatasourceQuery(datasource)\n    const dt = result;\n    const values = Object.keys(dt).map(k => dt[k]).filter(option => option != null)\n    setOptions(values)\n    tag.configuration.options = values\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    subscription = notificationService.getNotification().subscribe(widgetNotification => {\n      changeCurrentSelection(widgetNotification.appParamsValue)\n      if (tag?.configuration?.dataSource?.query?.urlParams?.length > 0) {\n        const urlParams = tag.configuration.dataSource.query.urlParams\n        const oldValues = urlParams.map(key => notification.appParamsValue[key] || '')\n        const newValues = urlParams.map(key => widgetNotification.appParamsValue[key] || '')\n        if (JSON.stringify(oldValues) != JSON.stringify(newValues)) {\n          fetchFilter(widgetNotification.appParamsValue)\n        }\n      } else {\n        setLoading(false)\n        setOptions(tag.configuration.options)\n      }\n      notification = { ...widgetNotification, appParamsValue: { ...widgetNotification.appParamsValue } }\n    })\n    return () => {\n      subscription.unsubscribe();\n    }\n  }, [])\n\n\n  useEffect(() => {\n    fetchFilter(notification)\n    changeCurrentSelection(mapParams)\n  }, [tag.configuration?.dataSource?.query?._id])\n\n  const changeCurrentSelection = (appParamsValue) => {\n    if (tag.configuration.appParam?.length == 0 || Object.keys(appParamsValue)?.length == 0) {\n      return\n    }\n    Object.keys(appParamsValue).forEach((key) => {\n      const tagAppParam = tag.configuration.appParam.find(({ value }) => key == value)\n      if (!tagAppParam) {\n        return\n      }\n      const selectedOption = tag.configuration.options.find(option => option[tagAppParam.label] == appParamsValue[key])\n      if (selectedOption) {\n        setSelectedOption(selectedOption[tag.configuration.serviceParam] || Object.values(selectedOption)[0])\n      }\n    })\n  }\n\n  const selectOption = (option) => {\n    setSelectedOption(option[tag.configuration.serviceParam] || Object.values(option)[0])\n    dispatchFilterNotification(option)\n  }\n\n  const dispatchFilterNotification = (option) => {\n    if (!tag?.configuration?.appParam) {\n      return\n    }\n    const appParamsValue = [];\n    (tag.configuration.appParam || []).forEach(({ label, value }) => {\n      appParamsValue[value] = option[label] || \"\"\n    });\n    const newNotification = { appParamsValue, fromWidgetKey: \"\" }\n    notificationService.sendNotification(newNotification);\n    onSendNotification(newNotification)\n  }\n\n  const resetSelection = () => {\n    setSelectedOption('ALL');\n  };\n\n  return (\n    <ButtonDropdown\n      isOpen={isOpenSizingLg}\n      toggle={() => setIsOpenSizingLg(!isOpenSizingLg)}\n    >\n      <DropdownToggle tag=\"span\" caret size=\"xs\" className=\"w-100\" className=\"d-flex align-items-center\">\n        <span className=\"truncate filter-value\" title={selectedOption}>\n          {selectedOption}\n        </span>\n      </DropdownToggle>\n      <DropdownMenu>\n        {loading === false ? (\n          options && options.length > 0 ? <>\n            <DropdownItem onClick={props.onReset}>\n              ALL\n            </DropdownItem>\n            <DropdownItem divider className=\"mt-1 mb-1\" />\n            {\n              options.map((option, index) => {\n                return (\n                  <DropdownItem key={index} onClick={() => selectOption(option)}>\n                    {option[tag.configuration.serviceParam] || Object.values(option)[0]}\n                  </DropdownItem>\n                )\n              })\n            }</> : <DropdownItem>No options found</DropdownItem>\n        ) : <DropdownItem>Loading ...</DropdownItem>\n        }\n      </DropdownMenu>\n    </ButtonDropdown>\n  )\n});\n\nexport default SelectOptionFilter"],"names":["noQueryDatasource","type","SelectOptionFilter","forwardRef","props","ref","subscription","tag","onSendNotification","notification","appParamsValue","useState","isOpenSizingLg","setIsOpenSizingLg","selectedOption","setSelectedOption","configuration","options","setOptions","loading","setLoading","useImperativeHandle","resetSelection","fetchFilter","paramsValue","datasource","dataSource","query","fetchDatasourceQuery","result","dt","values","Object","keys","map","k","filter","option","useEffect","notificationService","subscribe","widgetNotification","changeCurrentSelection","urlParams","length","oldValues","key","newValues","JSON","stringify","unsubscribe","mapParams","_id","appParam","forEach","tagAppParam","find","value","label","serviceParam","dispatchFilterNotification","newNotification","fromWidgetKey","isOpen","toggle","caret","size","className","title","onClick","onReset","divider","index","selectOption"],"sourceRoot":""}